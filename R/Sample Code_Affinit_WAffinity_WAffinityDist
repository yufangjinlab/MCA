#' ---
#' title: Example code for Weighted Affinity Score. The code is not validated yet.
#' author: M Malmir, Y Chen
#' date: May 2023
#' ---
# The example code for Weighted Affinity Score.
#' ## Weighted Affinity Score.
#'  See ICIBM 2023 paper. 
#' 
#' Cell type caller.
#' May 2023, UTSA, UTHSA


# function for Affinity score.
Affinity_Score <- function( count.matrix, count.matrix.markers) {
  a_score = apply( count.matrix.markers, 2, sum )
  cpmi = apply( count.matrix, 2, sum )
  a_score = log10( (a_score*1000000)/cpmi + 1 )
}


# function for WAffinity score.
WAffinity_Score <- function( count.matrix, count.matrix.markers, weight ) {
  weight <- unname(weight)
  numGenes = nrow( count.matrix.markers )
  count.matrix.genes.weighted = count.matrix.markers * unname(weight)
  wa_score = apply( count.matrix.genes.weighted, 2, sum )
  cpmi = apply( count.matrix, 2, sum )
  wa_score = log10( (wa_score*1000000)/(cpmi*numGenes) + 1 )
}


# function for getting Affinity weight
WAffinity_Weight <- function( nonzeros_exp, marker.genes, lBound, uBound ) {
  numGenes <- length( marker.genes )
  weight <- ifelse( nonzeros_exp > uBound, uBound/nonzeros_exp, 
                    ifelse(nonzeros_exp < lBound, nonzeros_exp/lBound, 1 ))
}


# plot
Dimplot <- function(method){
  DimPlot(Lung, reduction = "tsne", label = TRUE, repel = TRUE, group.by = method, pt.size = 0.5,
          label.size = 4) + guides(color = guide_legend(override.aes = list(size=2), ncol=1) )+
    ggtitle(method) +
    theme(plot.title = element_text(size = 16))+
    theme(panel.border = element_rect(color = "black", fill = NA, size = 1))+
    theme(legend.text = element_text(size = 13), legend.title = element_text(size = 13))+
    theme(axis.title = element_text(size = 13))+
    theme(axis.text = element_text(size = 13))
    
}
# loading scRNAseq data
BiocManager::install("TabulaMurisData")
library(ExperimentHub)
eh <- ExperimentHub()
query(eh, "TabulaMurisData")
eh <- eh[['EH1617']]
unique(eh$tissue)
tissue <- eh[, eh$tissue == 'Lung']
tissue <- tissue[ ,!is.na(tissue$cell_ontology_class)]
unique(tissue$cell_ontology_class)

###### Getting Count Matrix #############
Lung_DF <- as.matrix(tissue@assays@data$counts)
# creating Seurat object
Lung <- CreateSeuratObject(counts = Lung_DF, min.cells = 3, min.features = 200)
# Library-size normalization, log-transformation, and centering and scaling of gene expression values
Lung <- NormalizeData(Lung)
Lung <- ScaleData(Lung, features = rownames(Lung))
Lung <- RunMCA(Lung)
Lung <- RunPCA(Lung, features = rownames(Lung))
Lung <- RunTSNE(Lung, dims = 1:50, method = "tsne")
Lung <- RunUMAP(Lung, dims = 1:50, method = "umap")

# assign labels 
Lung@meta.data$Label <-tissue$cell_ontology_class
Lung@meta.data$Label[Lung@meta.data$Label == 'ciliated columnar cell of tracheobronchial tree'] <- 'ciliated'
Lung@meta.data$Label[Lung@meta.data$Label == 'myeloid cell'] <- 'myeloid'
Lung@meta.data$Label[Lung@meta.data$Label == 'alveolar macrophage'] <- 'alveolar'
Lung@meta.data$Label[Lung@meta.data$Label == 'natural killer cell'] <- 'NK'
Lung@meta.data$Label[Lung@meta.data$Label == 'lung endothelial cell'] <- 'endothelial'
Lung@meta.data$Label[Lung@meta.data$Label == 'stromal cell'] <- 'stromal'
Lung@meta.data$Label[Lung@meta.data$Label == 'non-classical monocyte'] <- 'nc-monocyte'
Lung@meta.data$Label[Lung@meta.data$Label == 'classical monocyte'] <- 'c-monocyte'
Lung@meta.data$Label[Lung@meta.data$Label == 'mast cell'] <- 'mast'
Lung@meta.data$Label[Lung@meta.data$Label == 'type II pneumocyte'] <- 'pneumocyte-II'


# Plot
Dimplot('Label')

# creating count matrix
count.matrix <- as.data.frame( Lung@assays$RNA@counts )


# loading marker genes
Total <- read_xlsx('Tabula_Lung_Total7.xlsx')   

marker.genes <- list(`alveolar` = Total$`alveolar`[!is.na(Total$`alveolar`)], 
                         `B cell` = Total$`B cell`[!is.na(Total$`B cell`)],
                         `ciliated` = Total$`ciliated`[!is.na(Total$`ciliated`)], 
                         `c-monocyte` = Total$`c-monocyte`[!is.na(Total$`c-monocyte`)],
                         leukocyte = Total$leukocyte[!is.na(Total$leukocyte)], 
                         `endothelial` = Total$`endothelial`[!is.na(Total$`endothelial`)],
                         `mast` = Total$mast[!is.na(Total$mast)], 
                         `myeloid` = Total$`myeloid`[!is.na(Total$`myeloid`)]
                         , NK = Total$NK[!is.na(Total$NK)] , 
                         `nc-monocyte` = Total$`nc-monocyte`[!is.na(Total$`nc-monocyte`)]
                         , `stromal` = Total$`stromal`[!is.na(Total$`stromal`)] , 
                         `T cell` = Total$`T cell`[!is.na(Total$`T cell`)]
                         , `pneumocyte-II` = Total$`pneumocyte-II`[!is.na(Total$`pneumocyte-II`)]
)


# Delete the genes that does not exist in the count matrix 
k  = 1
while(k != 0){
  k =0 
  for(i in 1:length(names(marker.genes))){
    for (j in 1:length(marker.genes[[i]])) {
      if(!(marker.genes[[i]][j] %in% rownames(count.matrix))){ k = k+1
      marker.genes[[i]] <- marker.genes[[i]][-c(j)]
      }
    }
  }
}

# just to make sure every gene is in the scRNA-seq data. This code is not needed. 
celltypes <- names( marker.genes )
all.markers = as.vector( as.matrix(Total) )
all.markers <- unique( all.markers[ !is.na(all.markers) ] )

names = rownames( count.matrix )
for( i in 1:length(all.markers) ) {
  idx = which( names == all.markers[i])
  if( length(idx) == 0 ) {
    cat( all.markers[i])
    cat( '\n')
  }
}



# Affinity method
# create Affinity matrix. 
a_score_table <- matrix( nrow = length(marker.genes), 
                         ncol = ncol(count.matrix) )
colnames(a_score_table) <- colnames(count.matrix)
rownames(a_score_table) <- names( marker.genes )
for( i in 1:length(marker.genes) ) {
  genes <- marker.genes[[i]]
  count.matrix.markers <- count.matrix[ genes, ]
  a_score_table[i, ] <- Affinity_Score( count.matrix, count.matrix.markers)
}
Affinity_predict <- rownames(a_score_table)[apply(a_score_table, 2, which.max)]
Affinity_predict <- ifelse(apply(a_score_table, 2, max)>0, yes = Affinity_predict, "unassigned")
#Save cell type predictions as metadata within the Seurat object
Lung$Affinity <- Affinity_predict
#PLOT
Dimplot("Affinity")


# WAffinity method
# create WAffinity matrix. 
wa_score_table <- matrix( nrow = length(marker.genes), 
                          ncol = ncol(count.matrix) )
colnames(wa_score_table) <- colnames(count.matrix)
rownames(wa_score_table) <- names( marker.genes )
for( i in 1:length(marker.genes) ) { # for every cell types
  genes <- marker.genes[[i]]         # get marker genes for cell type i.
  # get cpm matrix for marker genes only
  count.matrix.markers <- count.matrix[ genes, ]
  count.matrix.genes <- count.matrix[ genes, ]
  count.matrix.genes <- count.matrix.genes > 0
  nonzeros_exp <- apply( count.matrix.genes, 1, sum )
  fracIRQ <- 0
  Q1 <- quantile( nonzeros_exp, prob=c(0.25,0.75), type=1)[[1]]
  Q3 <- quantile( nonzeros_exp, prob=c(0.25,0.75), type=1)[[2]]
  IQR <- Q3 - Q1
  uBound = Q3 + (fracIRQ*IQR) 
  lBound = Q1 - (fracIRQ*IQR)
  # calculate weights and WAffinity scores.
  weight <- WAffinity_Weight(nonzeros_exp, genes, lBound, uBound )
  print(weight)
  wa_score_table[i, ] <- WAffinity_Score( count.matrix, count.matrix.markers, weight )
}
WAffinity_predict <- rownames(wa_score_table)[apply(wa_score_table, 2, which.max)]
WAffinity_predict <- ifelse(apply(wa_score_table, 2, max)>0, yes = WAffinity_predict, "unassigned")
#Save cell type predictions as metadata within the Seurat object
Lung$WAffinity <- WAffinity_predict
#PLOT
Dimplot("WAffinity")


#  MCA Method
HGT_Lung_gs <- RunCellHGT(Lung, pathways = marker.genes , dims = 1:30, n.features = 2000, minSize = 1)
df_HGT_Lung_gs <- as.data.frame(as.matrix(HGT_Lung_gs))
# For each cell, assess the signature with the lowest corrected p-value (max -log10 corrected p-value)
CellID_Pridict <- rownames(HGT_Lung_gs)[apply(HGT_Lung_gs, 2, which.max)]
# For each cell, evaluate if the lowest p-value is significant
CellID_prediction_signif <- ifelse(apply(HGT_Lung_gs, 2, max)>0, yes = CellID_Pridict, "unassigned")
#Save cell type predictions as metadata within the Seurat object
Lung$Cell_ID <- CellID_prediction_signif

# plot
Dimplot("Cell_ID")

################## Combined CellID and Affinity Method ##################
Affinity_Distance_Score <- data.frame(matrix(nrow = length(marker.genes), ncol = ncol(count.matrix)))
rownames(Affinity_Distance_Score) <- names(marker.genes)
colnames(Affinity_Distance_Score) <- colnames(count.matrix)

######### Writing a proper formula for combining two methods##########################
for (i in 1:length(names(marker.genes))) {
  a = max(wa_score_table_Lung [i,])
  b = max(df_HGT_Lung_gs[i,])
  for (j in 1:length(colnames(count.matrix))) {
    Affinity_Distance_Score[i,j] <- (((a*df_HGT_Lung_gs[i,j])/b)) + wa_score_table_Lung [i,j]
  }
}

########## Assign cell types for WAffinityDist method #############
WAffinityDist_predict <- rownames(Affinity_Distance_Score)[apply(Affinity_Distance_Score, 2, which.max)]
WAffinityDist_predict <- ifelse(apply(Affinity_Distance_Score, 2, max)>0, yes = WAffinityDist_predict, "unassigned")
#Save cell type predictions as metadata within the Seurat object
Lung$WAffinityDist <- WAffinityDist_predict

#PLOT
Dimplot("WAffinityDist")
